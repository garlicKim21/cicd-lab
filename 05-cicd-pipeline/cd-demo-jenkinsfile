// CD 파이프라인에서 사용할 변수 정의
def DOCKERHUB_REGISTRY = "docker.io"
def DOCKERHUB_USERNAME = "<사용자 Docker Hub ID>" // 본인 Docker Hub ID로 변경
def APP_NAME = "cicd-demo"
def K8S_DEPLOYMENT_NAME = "cicd-demo-deployment"
def K8S_CONTAINER_NAME = "cicd-demo-container"
def GIT_REPO_URL = "git@github.com:<사용자 github repo 주소.git>" // 본인 Github Repo 주소로 변경
def GIT_CREDENTIALS_ID = "github-ssh-key"

pipeline {
    // 1. Agent 설정: 배포에 필요한 git, kubectl 컨테이너만 사용
    agent {
        kubernetes {
            cloud 'kubernetes'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: git
    image: alpine/git:latest
    command: ['sleep']
    args: ['infinity']
  - name: kubectl
    image: alpine/k8s:1.34.1
    command: ['sleep']
    args: ['infinity']
"""
        }
    }

    // 2. Parameters: 파이프라인 실행 시 사용자로부터 입력받을 값
    parameters {
        // '배포할 이미지 태그'를 입력받는 문자열 파라미터
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: '배포할 컨테이너 이미지의 태그를 입력하세요 (예: 1, 2, latest)')
    }

    // 3. Stages: 실제 배포 단계 정의
    stages {
        // Stage 1: 배포 설정 파일(Manifests) Checkout
        stage('Checkout Manifests') {
            steps {
                container('git') {
                    // Git에서 k8s 설정 파일들을 가져옵니다.
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: GIT_REPO_URL,
                            credentialsId: GIT_CREDENTIALS_ID
                        ]]
                    ])
                    echo "Kubernetes manifest 파일을 준비했습니다."
                }
            }
        }

        // Stage 2: 쿠버네티스에 배포
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        // 파라미터로 받은 이미지 태그를 사용하여 최종 이미지 주소를 만듭니다.
                        def REGISTRY_IMAGE = "${DOCKERHUB_REGISTRY}/${DOCKERHUB_USERNAME}/${APP_NAME}:${params.IMAGE_TAG}"

                        echo "Deploying image: ${REGISTRY_IMAGE} to Kubernetes"
                        
                        // 1. k8s 폴더의 설정 파일을 클러스터에 적용합니다.
                        sh "kubectl apply -f k8s/"
                        
                        // 2. Deployment의 컨테이너 이미지를 파라미터로 받은 새 이미지로 교체합니다.
                        sh "kubectl -n cicd-demo set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_CONTAINER_NAME}=${REGISTRY_IMAGE}"
                        
                        // 3. 배포가 완료될 때까지 기다리고 상태를 확인합니다.
                        sh "kubectl -n cicd-demo rollout status deployment/${K8S_DEPLOYMENT_NAME}"
                        
                        // 4. Ingress 설정을 확인합니다.
                        echo "Verifying Ingress setup..."
                        sh "sleep 5"
                        sh "kubectl get ingress -n cicd-demo cicd-demo-ingress"
                    }
                }
            }
        }
    }

    // 4. Post Actions: 파이프라인 종료 후 작업
    post {
        always {
            echo 'Pipeline finished.'
            deleteDir()
        }
    }
}